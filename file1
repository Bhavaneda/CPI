// server.js

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(bodyParser.json());
app.use(cors());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/stockdata', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useCreateIndex: true,
});
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => {
    console.log('Connected to MongoDB');
});

// Define schema for daily price data
const dailyPriceSchema = new mongoose.Schema({
    Date: Date,
    Open: Number,
    High: Number,
    Low: Number,
    Close: Number,
    AdjClose: Number,
    Volume: Number,
    Ticker: String,
});

const DailyPrice = mongoose.model('daily_price', dailyPriceSchema);

// Routes
app.post('/api/backtest', async (req, res) => {
    const { ticker, startDate, endDate, initialCapital } = req.body;

    try {
        const historicalData = await DailyPrice.find({
            Ticker: ticker,
            Date: { $gte: new Date(startDate), $lte: new Date(endDate) },
        }).sort({ Date: 1 });

        // Implement backtesting logic here
        // Example: Calculate moving averages, simulate trades, etc.

        // Dummy response for now
        res.json({ message: 'Backtesting completed successfully', results: [] });
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server error');
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});









// src/components/BacktestForm.js

import React, { useState } from 'react';
import axios from 'axios';

const BacktestForm = () => {
    const [ticker, setTicker] = useState('');
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');
    const [initialCapital, setInitialCapital] = useState(10000);
    const [results, setResults] = useState([]);

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            const res = await axios.post('http://localhost:5000/api/backtest', {
                ticker,
                startDate,
                endDate,
                initialCapital,
            });
            setResults(res.data.results);
        } catch (err) {
            console.error(err.message);
        }
    };

    return (
        <div>
            <h1>Stock Backtesting</h1>
            <form onSubmit={handleSubmit}>
                <input type="text" placeholder="Ticker Symbol" value={ticker} onChange={(e) => setTicker(e.target.value)} required />
                <input type="date" placeholder="Start Date" value={startDate} onChange={(e) => setStartDate(e.target.value)} required />
                <input type="date" placeholder="End Date" value={endDate} onChange={(e) => setEndDate(e.target.value)} required />
                <input type="number" placeholder="Initial Capital" value={initialCapital} onChange={(e) => setInitialCapital(e.target.value)} required />
                <button type="submit">Backtest</button>
            </form>
            <h2>Backtesting Results</h2>
            <ul>
                {results.map((result, index) => (
                    <li key={index}>
                        <p>Date: {new Date(result.date).toLocaleDateString()}</p>
                        <p>Capital: ${result.capital.toFixed(2)}</p>
                        <p>Shares: {result.shares}</p>
                        <p>Closing Price: ${result.close.toFixed(2)}</p>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default BacktestForm;











// src/App.js

import React from 'react';
import './App.css';
import BacktestForm from './components/BacktestForm';

function App() {
    return (
        <div className="App">
            <header className="App-header">
                <BacktestForm />
            </header>
        </div>
    );
}

export default App;








