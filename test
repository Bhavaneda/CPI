const { test, expect } = require('@playwright/test');

test('Click on the card with specific ticker within wholegrid', async ({ page }) => {
  // Navigate to your application page
  await page.goto('http://localhost:3000');

  // Wait for the page to load completely
  await page.waitForLoadState('networkidle');

  // Define the ticker you want to interact with
  const tickerToFind = 'AAPL';

  // Locate the wholegrid container
  const wholegrid = page.locator('div.wholegrid');

  // Locate all abcd elements within the wholegrid
  const abcdElements = wholegrid.locator('div.abcd');
  const abcdCount = await abcdElements.count();
  console.log(`Found ${abcdCount} elements with class "abcd" in wholegrid`);

  // Iterate through each abcd element to find the one with the specified ticker
  for (let i = 0; i < abcdCount; i++) {
    const abcdElement = abcdElements.nth(i);
    const tickerElement = abcdElement.locator('p.tickerclass');
    const tickerText = await tickerElement.textContent();

    if (tickerText === tickerToFind) {
      // Click the abcd element containing the desired ticker
      await abcdElement.click();

      // Verify navigation or other expected behavior
      await page.waitForNavigation();
      const url = page.url();
      expect(url).toContain(`/search/${tickerToFind}`);

      console.log(`Clicked on the element with ticker ${tickerToFind} and navigated to ${url}`);
      break;
    }
  }
});





const { test, expect } = require('@playwright/test');

test('Verify count of elements with class "abcd" within wholegrid', async ({ page }) => {
  // Navigate to your application page
  await page.goto('http://localhost:3000');

  // Wait for the page to load
  await page.waitForLoadState('networkidle');

  try {
    // Locate the wholegrid card
    const wholegrid = await page.locator('div.wholegrid');

    // Find all elements with class 'abcd' within the wholegrid card
    const abcdElements = await wholegrid.locator('.abcd');
    const abcdCount = await abcdElements.count();
    console.log(`Found ${abcdCount} elements with class "abcd" in wholegrid`);

    // Assert or log the count as needed
    await expect(abcdCount).toBeGreaterThan(0);
    console.log(`Assertion passed: Found elements with class "abcd"`);

    // Optionally, you can log the text content or other attributes of these elements
    for (let j = 0; j < abcdCount; j++) {
      const text = await abcdElements.nth(j).textContent();
      console.log(`Element ${j + 1}: Text Content - ${text}`);
    }
  } catch (error) {
    console.error('Error:', error);
  }
});




const { test, expect } = require('@playwright/test');

test('Navigate to respective ticker page on card click', async ({ page }) => {
  // Navigate to your application page
  await page.goto('http://localhost:3000');

  // Locate all cards with the class 'abcd'
  const cards = page.locator('div.abcd');
  const cardCount = await cards.count();
  console.log(`Found ${cardCount} cards`);

  if (cardCount === 0) {
    console.error('No cards found with the class "abcd".');
    return;
  }

  // Iterate over each card
  for (let i = 0; i < cardCount; i++) {
    console.log(`Processing card ${i + 1} of ${cardCount}`);
    
    try {
      // Locate the ticker name within the card
      const tickerElement = cards.nth(i).locator('p.tickerclass');
      const ticker = await tickerElement.textContent();
      console.log(`Ticker found: ${ticker}`);
      
      // Check if ticker text is null or undefined
      if (!ticker) {
        console.error(`Ticker not found in card ${i + 1}`);
        continue;
      }

      // Click on the card
      await cards.nth(i).click();
      console.log(`Clicked on card ${i + 1}, navigating to ticker page...`);

      // Wait for navigation to the respective ticker page
      await page.waitForNavigation();
      console.log(`Navigation completed`);

      // Verify the URL is correct
      await expect(page).toHaveURL(`http://localhost:3000/search/${ticker}`);
      console.log(`URL verified: http://localhost:3000/search/${ticker}`);

      // Go back to the previous page to continue with the next card
      await page.goBack();
      console.log(`Navigated back to the main page`);
    } catch (error) {
      console.error(`Error processing card ${i + 1}:`, error);
    }
  }
});




const { test, expect } = require('@playwright/test');

test('Verify clicking on stock cards navigates to respective ticker page', async ({ page }) => {
  // Navigate to your application page
  await page.goto('http://localhost:3000'); // Replace with your application URL

  // Wait for the root div to be loaded
  await page.waitForSelector('#root');

  // Locate the root div
  const rootDiv = await page.locator('#root');

  // Get all cards with the class "abcd" within the root div
  const cards = await rootDiv.locator('div.abcd');
  const cardCount = await cards.count();

  for (let i = 0; i < cardCount; i++) {
    // Find the ticker name within the card
    const ticker = await cards.nth(i).locator('p.ticker').textContent();
    
    // Click the card to navigate to the respective ticker page
    await cards.nth(i).click();
    
    // Wait for the navigation to the ticker page
    await page.waitForNavigation();
    
    // Verify that the URL contains the ticker
    await expect(page).toHaveURL(new RegExp(`/search/${ticker.trim()}`));
    
    // Go back to the main page to test the next card
    await page.goBack();
  }
});





const { test, expect } = require('@playwright/test');

test('Verify StockTabs button states', async ({ page }) => {
  // Navigate to your application page
  await page.goto('your-application-url');
  
  // Wait for the specific <div class="mt-6"> containing the buttons
  const tabContainer = page.locator('div.mt-6').filter({ hasText: /^Summary Peer Comparison Top News Historical Chart$/ }).first();

  // Wait for the tab container to be visible
  await tabContainer.waitFor();

  // Locate buttons within the tab container
  const tabButtons = await tabContainer.locator('button[role="tab"]');

  // Print out the texts of all located buttons to verify
  const buttonCount = await tabButtons.count();
  for (let i = 0; i < buttonCount; i++) {
    console.log(`Button ${i} text:`, await tabButtons.nth(i).innerText());
  }

  // Verify the "Summary" button has aria-selected="true" by default
  const summaryButton = tabButtons.filter({ hasText: 'Summary' });
  await expect(summaryButton).toHaveAttribute('aria-selected', 'true');

  // Verify the "Peer Comparison" button has aria-selected="false" by default
  const peerComparisonButton = tabButtons.filter({ hasText: 'Peer Comparison' });
  await expect(peerComparisonButton).toHaveAttribute('aria-selected', 'false');

  // Verify the "Top News" button has aria-selected="false" by default
  const newsButton = tabButtons.filter({ hasText: 'Top News' });
  await expect(newsButton).toHaveAttribute('aria-selected', 'false');

  // Verify the "Historical Chart" button has aria-selected="false" by default
  const chartsButton = tabButtons.filter({ hasText: 'Historical Chart' });
  await expect(chartsButton).toHaveAttribute('aria-selected', 'false');

  // Click on the "Top News" button and verify the state changes
  await newsButton.click();
  await expect(newsButton).toHaveAttribute('aria-selected', 'true');
  await expect(summaryButton).toHaveAttribute('aria-selected', 'false');
  await expect(peerComparisonButton).toHaveAttribute('aria-selected', 'false');
  await expect(chartsButton).toHaveAttribute('aria-selected', 'false');

  // Click on the "Charts" button and verify the state changes
  await chartsButton.click();
  await expect(chartsButton).toHaveAttribute('aria-selected', 'true');
  await expect(summaryButton).toHaveAttribute('aria-selected', 'false');
  await expect(peerComparisonButton).toHaveAttribute('aria-selected', 'false');
  await expect(newsButton).toHaveAttribute('aria-selected', 'false');
});





const { test, expect } = require('@playwright/test');

test('Verify buttons within <div class="pb-3">', async ({ page }) => {
  // Navigate to your application page
  await page.goto('your-application-url');
  await page.waitForNavigation();

  // Locate the <div class="pb-3"> and find buttons within it
  const divPb3 = await page.locator('div.pb-3');
  const buttons = await divPb3.locator('button[role="tab"]');

  // Check default state of buttons
  for (let i = 0; i < buttons.length; i++) {
    const isSelected = await buttons[i].getAttribute('aria-selected');
    expect(isSelected).toBeFalsy(); // Assuming default is not selected
  }

  // Click on each button and verify state changes
  for (let i = 0; i < buttons.length; i++) {
    await buttons[i].click();

    // Wait for a brief moment to allow UI state change
    await page.waitForTimeout(500); // Adjust timeout as necessary

    // Check if the clicked button has aria-selected="true"
    const isSelected = await buttons[i].getAttribute('aria-selected');
    expect(isSelected).toBeTruthy();

    // Check if other buttons have aria-selected="false"
    for (let j = 0; j < buttons.length; j++) {
      if (j !== i) {
        const isNotSelected = await buttons[j].getAttribute('aria-selected');
        expect(isNotSelected).toBeFalsy();
      }
    }
  }
});








const { test, expect } = require('@playwright/test');

test('Verify StockTabs button states', async ({ page }) => {
  // Navigate to your application page
  await page.goto('your-application-url');
  
  // Wait for the specific <div class="mt-6"> containing the buttons
  const tabContainer = page.locator('div.mt-6').filter({ hasText: /^Summary Peer Comparison Top News Historical Chart$/ }).first();

  // Wait for the buttons to be visible
  await tabContainer.waitFor();

  // Locate buttons within the tab container
  const tabButtons = await tabContainer.locator('button[role="tab"]');

  // Verify the "Summary" button has aria-selected="true" by default
  const summaryButton = tabButtons.nth(0);
  await expect(summaryButton).toHaveAttribute('aria-selected', 'true');

  // Verify the other buttons have aria-selected="false" by default
  const newsButton = tabButtons.nth(1);
  await expect(newsButton).toHaveAttribute('aria-selected', 'false');

  const chartsButton = tabButtons.nth(2);
  await expect(chartsButton).toHaveAttribute('aria-selected', 'false');

  // Click on the "Top News" button and verify the state changes
  await newsButton.click();
  await expect(newsButton).toHaveAttribute('aria-selected', 'true');
  await expect(summaryButton).toHaveAttribute('aria-selected', 'false');
  await expect(chartsButton).toHaveAttribute('aria-selected', 'false');

  // Click on the "Charts" button and verify the state changes
  await chartsButton.click();
  await expect(chartsButton).toHaveAttribute('aria-selected', 'true');
  await expect(summaryButton).toHaveAttribute('aria-selected', 'false');
  await expect(newsButton).toHaveAttribute('aria-selected', 'false');
});







const { test, expect } = require('@playwright/test');

test('Verify StockTabs button states', async ({ page }) => {
  // Navigate to your application page
  await page.goto('your-application-url');
  
  // Wait for the <div class="mt-6"> to be visible
  await page.locator('div.mt-6').waitFor();

  // Locate buttons within the <div class="mt-6">
  const tabButtons = await page.locator('div.mt-6 button[role="tab"]');

  // Verify the "Summary" button has aria-selected="true" by default
  const summaryButton = tabButtons.nth(0);
  await expect(summaryButton).toHaveAttribute('aria-selected', 'true');

  // Verify the other buttons have aria-selected="false" by default
  const newsButton = tabButtons.nth(1);
  await expect(newsButton).toHaveAttribute('aria-selected', 'false');

  const chartsButton = tabButtons.nth(2);
  await expect(chartsButton).toHaveAttribute('aria-selected', 'false');

  // Click on the "Top News" button and verify the state changes
  await newsButton.click();
  await expect(newsButton).toHaveAttribute('aria-selected', 'true');
  await expect(summaryButton).toHaveAttribute('aria-selected', 'false');
  await expect(chartsButton).toHaveAttribute('aria-selected', 'false');

  // Click on the "Charts" button and verify the state changes
  await chartsButton.click();
  await expect(chartsButton).toHaveAttribute('aria-selected', 'true');
  await expect(summaryButton).toHaveAttribute('aria-selected', 'false');
  await expect(newsButton).toHaveAttribute('aria-selected', 'false');
});


const { test, expect } = require('@playwright/test');

test('Verify HistoricalChart component', async ({ page }) => {
  // Mock backend response
  const mockData = [
    {
      date: '2023-01-01',
      open: 100,
      high: 120,
      low: 95,
      close: 110,
      volume: 1000000,
    },
    {
      date: '2023-01-02',
      open: 110,
      high: 130,
      low: 105,
      close: 120,
      volume: 1200000,
    },
    // Add more sample data as needed
  ];

  // Mock API endpoint response
  await page.route('**/api/history*', route => {
    route.fulfill({
      status: 200,
      body: mockData,
    });
  });

  // Navigate to your application page that contains HistoricalChart
  await page.goto('http://localhost:3000');

  // Wait for the HistoricalChart component to render
  await page.waitForSelector('.mt-4');

  // Check if the chart renders with the correct title
  const chartTitle = await page.textContent('.highcharts-title tspan');
  expect(chartTitle).toContain('Historical Chart for');

  // Check if the candlestick series renders correctly
  const candlestickSeries = await page.$('.highcharts-series.highcharts-series-0');
  expect(candlestickSeries).not.toBeNull();

  // Check if the volume series renders correctly
  const volumeSeries = await page.$('.highcharts-series.highcharts-series-1');
  expect(volumeSeries).not.toBeNull();

  // You can add more assertions as needed based on your chart configuration

  // Example of checking the tooltip (if configured)
  await page.hover('.highcharts-point');

  const tooltipText = await page.textContent('.highcharts-tooltip');
  expect(tooltipText).toContain('Open:');
  expect(tooltipText).toContain('High:');
  expect(tooltipText).toContain('Low:');
  expect(tooltipText).toContain('Close:');

  // Example of checking loading animation before data is fetched
  // Ensure loading state is not present (assuming .animate-pulse is only during loading)
  await page.waitForSelector('.animate-pulse', { state: 'hidden' });

  // Example of waiting for initial data fetch to complete
  await page.waitForSelector('.highcharts-series');

  // Add more tests as per your application's functionality

});



const { test, expect } = require('@playwright/test');

test('Verify NewsComponent functionality', async ({ page }) => {
  // Mock data to simulate backend response
  const mockNewsData = {
    articles: [
      {
        source: { name: 'Mock News Source' },
        publishedAt: '2023-07-15T10:30:00Z',
        title: 'Mock News Title',
        description: 'Mock news description.',
        url: 'https://mocknews.com/article',
        urlToImage: 'https://mocknews.com/images/mock-image.jpg',
      },
      // Add more articles as needed
    ],
  };

  // Mock API endpoint response for news data
  await page.route('**/api/news*', route => {
    route.fulfill({
      status: 200,
      body: [mockNewsData],
    });
  });

  // Navigate to your React application page containing NewsComponent
  await page.goto('http://localhost:3000');

  // Wait for NewsComponent to render
  await page.waitForSelector('.card');

  // Check if the news card displays correctly
  const newsTitle = await page.textContent('.card .MuiTypography-h6');
  expect(newsTitle).toContain('Mock News Title');

  // Click on the news card to open modal
  await page.click('.card');

  // Wait for the modal to open
  await page.waitForSelector('.modal');

  // Check if modal content is displayed correctly
  const modalTitle = await page.textContent('.modal .MuiTypography-h5');
  expect(modalTitle).toContain('Mock News Title');

  // Verify modal elements such as description, publisher, etc.
  const modalDescription = await page.textContent('.modal .MuiTypography-body1');
  expect(modalDescription).toContain('Mock news description.');

  // Close the modal
  await page.click('.modal .MuiIconButton-root');

  // Wait for the modal to close
  await page.waitForSelector('.modal', { state: 'hidden' });

  // You can add more assertions based on your component's functionality

});


const { test, expect } = require('@playwright/test');

test('Verify NewsComponent modal open on click', async ({ page }) => {
  // Mock data to simulate news component props
  const mockNewsData = {
    urlToImage: 'https://www.example.com/image.jpg',
    description: 'Mock news description.',
    title: 'Mock News Title',
    publishedAt: '2023-07-15T10:30:00Z',
    url: 'https://www.example.com/article',
    sourceName: 'Mock News Source',
  };

  // Render the NewsComponent directly with mock props
  await page.setContent(`
    <html>
      <body>
        <div id="root"></div>
      </body>
    </html>
  `);

  // Inject the NewsComponent with mock props into the page
  await page.evaluate((mockNewsData) => {
    const root = document.getElementById('root');
    const NewsComponent = window.NewsComponent.default;

    ReactDOM.render(
      <NewsComponent newsData={mockNewsData} />,
      root
    );
  }, mockNewsData);

  // Wait for the NewsComponent to render
  await page.waitForSelector('.card');

  // Click on the news card to open modal
  await page.click('.card');

  // Wait for the modal to open
  await page.waitForSelector('.modal');

  // Check if modal is visible
  const modalVisible = await page.isVisible('.modal');
  expect(modalVisible).toBeTruthy();

  // Close the modal
  await page.click('.modal .MuiIconButton-root');

  // Wait for the modal to close
  await page.waitForSelector('.modal', { state: 'hidden' });

  // Ensure modal is closed
  const modalClosed = await page.isVisible('.modal');
  expect(modalClosed).toBeFalsy();
});









const { test, expect } = require('@playwright/test');

test('Verify aria-selected attribute on tab buttons', async ({ page }) => {
  // Navigate to your application page
  await page.goto('your-application-url');
  await page.waitForNavigation();

  // Verify default state for Summary button
  const summaryButton = await page.locator('button[aria-selected="true"]');
  expect(await summaryButton.innerText()).toContain('Summary');

  // Click on other buttons and verify their state
  const buttons = await page.locator('button[role="tab"]');
  for (const button of buttons) {
    await button.click();

    // Wait for a brief moment to allow UI state change
    await page.waitForTimeout(500); // Adjust timeout as necessary

    // Check if the clicked button has aria-selected="true"
    const isSelected = await button.evaluate((node) => node.getAttribute('aria-selected') === 'true');
    expect(isSelected).toBeTruthy();

    // Check if other buttons have aria-selected="false"
    for (const otherButton of buttons) {
      if (otherButton !== button) {
        const isNotSelected = await otherButton.evaluate((node) => node.getAttribute('aria-selected') === 'false');
        expect(isNotSelected).toBeTruthy();
      }
    }
  }
});





const { test, expect } = require('@playwright/test');

test('Display all button components inside a div', async ({ page }) => {
  await page.goto('your-application-url');
  await page.waitForNavigation();

  // Wait for the container div to be visible
  const containerDiv = await page.waitForSelector('div.abcd', { state: 'visible' });

  // Get all buttons within the container
  const buttons = await containerDiv.$$('button');

  // Iterate over each button and log its text content and attributes
  for (let button of buttons) {
    const buttonText = await button.innerText();
    const buttonAttributes = await button.attributes();
    console.log(`Button Text: ${buttonText}`);
    console.log(`Button Attributes: ${JSON.stringify(buttonAttributes, null, 2)}`);
  }
});






const { test, expect } = require('@playwright/test');

test('Interact with "Summary" button based on initial aria-selected state', async ({ page }) => {
  // Navigate to the application URL
  await page.goto('your-application-url');
  await page.waitForNavigation();

  // Wait for the "Summary" button to be visible and interactable
  const summaryButton = await page.waitForSelector('button.but[aria-selected="true"]', { state: 'visible' });

  // Verify the initial state of the button
  const isInitiallySelected = await summaryButton.getAttribute('aria-selected');
  expect(isInitiallySelected).toBe('true');

  // Click on the "Summary" button
  await summaryButton.click();

  // Wait for any state change or action to complete
  await page.waitForTimeout(1000); // Adjust timeout as necessary

  // Verify the expected outcome or state change
  // For example, check if the button state has changed or a success message appears
  // Example: Verify a success message
  const toastMessage = await page.locator('div.Toastify__toast:has-text("Added to watchlist successfully")');
  await expect(toastMessage).toBeVisible();
});




const { test, expect } = require('@playwright/test');

test('should locate and click the "Summary" button and verify the action', async ({ page }) => {
  // Navigate to the page
  await page.goto('your-application-url');

  // Wait for the button with text "Summary" to be visible
  const summaryButton = page.locator('button:has-text("Summary")');
  await summaryButton.waitFor({ state: 'visible' });

  // Click the "Summary" button
  await summaryButton.click();

  // Wait for the result of the click action
  // This could be a change in some content or the appearance of a specific element
  await page.waitForTimeout(1000); // Adjust timeout as needed

  // Verify the change
  // Example: Check if specific content is displayed after clicking the "Summary" button
  const content = await page.locator('selector-for-the-content-changed-by-button-click');
  await expect(content).toBeVisible();
});








const { test, expect } = require('@playwright/test');

test('should add to watchlist and show success message', async ({ page }) => {
  // Navigate to the page
  await page.goto('your-application-url');

  // Click the star icon to add to watchlist
  await page.click('svg[data-testid="StarIcon"]');

  // Wait for the toast notification to appear
  await page.waitForSelector('div.Toastify__toast', { timeout: 5000 });

  // Get all toast messages and check for the specific text
  const toastMessages = await page.locator('div.Toastify__toast').allTextContents();
  const foundToast = toastMessages.some(text => text.includes('Added to watchlist successfully'));
  expect(foundToast).toBe(true);
});






const { chromium, expect } = require('playwright');

(async () => {
  const browser = await chromium.launch({ headless: false }); // Launch browser in non-headless mode for debugging
  const page = await browser.newPage();

  // Navigate to your webpage
  await page.goto('https://example.com'); // Replace with your actual URL

  // Wait for the SVG element with data-testid='StarIcon' to be visible
  const starIcon = await page.locator('svg[data-testid="StarIcon"]');
  await starIcon.waitFor({ state: 'visible' });

  // Click the SVG element to add to watchlist
  await starIcon.click();

  // Wait for the element with class 'bg-yellow-600' to be visible
  const elementWithYellowClass = await page.locator('.bg-yellow-600');
  await elementWithYellowClass.waitFor({ state: 'visible' });

  // Assert that the element has the class 'bg-yellow-600'
  await expect(elementWithYellowClass).toHaveClass('bg-yellow-600');

  // Wait for the "Added to watchlist successfully" toast message
  const addedToastMessage = await page.locator('.Toastify__toast').withText('Added to watchlist successfully');
  await addedToastMessage.waitFor({ state: 'visible' });

  // Click the SVG element again to remove from watchlist
  await starIcon.click();

  // Wait for the element with class 'bg-yellow-600' to be hidden
  await elementWithYellowClass.waitFor({ state: 'hidden' });

  // Wait for the "Removed from watchlist successfully" toast message
  const removedToastMessage = await page.locator('.Toastify__toast').withText('Removed from watchlist successfully');
  await removedToastMessage.waitFor({ state: 'visible' });

  // Take a screenshot for debugging
  await page.screenshot({ path: 'final-state.png' });

  // Close the browser
  await browser.close();
})();







const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch({ headless: false }); // Launch browser in non-headless mode for debugging
  const page = await browser.newPage();

  // Navigate to your webpage
  await page.goto('https://example.com'); // Replace with your actual URL

  // Wait for the SVG element with data-testid='StarIcon' to be visible
  const starIcon = await page.locator('svg[data-testid="StarIcon"]');
  await starIcon.waitFor({ state: 'visible' });

  // Click the SVG element
  await starIcon.click();

  // Take a screenshot for debugging
  await page.screenshot({ path: 'after-click-star-icon.png' });

  // Close the browser
  await browser.close();
})();






const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch({ headless: false }); // Launch browser in non-headless mode for debugging
  const page = await browser.newPage();

  // Navigate to your webpage
  await page.goto('https://example.com');  // Replace with your actual URL

  // Click on the div containing the <Star /> component
  await page.click('div:has(svg.abcd)'); // Adjust this selector to target the correct <div> with <Star />

  // Adding a delay to observe changes
  await page.waitForTimeout(2000); // Wait for 2 seconds to give time for the class to be applied

  // Wait for the div to change and have the class 'bg-yellow-600'
  try {
    await page.waitForSelector('div.bg-yellow-600', { timeout: 5000 });  // Wait for up to 5 seconds
    console.log('Class "bg-yellow-600" applied successfully');
  } catch (error) {
    console.error('Error: Class "bg-yellow-600" not found');
  }

  // Validate if the class has been applied
  const hasClass = await page.locator('div.bg-yellow-600').isVisible();
  console.log('Class "bg-yellow-600" applied:', hasClass);

  // Take a screenshot for debugging
  await page.screenshot({ path: 'debug-screenshot.png' });

  // Close the browser
  await browser.close();
})();








const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch({ headless: false }); // Launch browser in non-headless mode for debugging
  const page = await browser.newPage();

  // Navigate to your webpage
  await page.goto('https://example.com');  // Replace with your actual URL

  // Click on the div containing <Star />
  await page.click('div:has(svg)'); // Adjust this selector to target the correct <div> with <Star />

  // Wait for the div to change and have the class 'bg-yellow-600'
  await page.waitForSelector('div.bg-yellow-600', { timeout: 5000 });  // Wait for up to 5 seconds

  // Validate if the class has been applied
  const hasClass = await page.locator('div.bg-yellow-600').isVisible();
  console.log('Class "bg-yellow-600" applied:', hasClass);

  // Close the browser
  await browser.close();
})();






const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();

  // Navigate to your webpage
  await page.goto('https://example.com');  // Replace with your actual URL

  // Wait for the div that contains the star icon
  const divWithStar = await page.waitForSelector('div[class^="bg-yellow-600"]'); // Waiting for the div with bg-yellow-600 class

  // Click on the div element to toggle favorite
  await divWithStar.click();

  // Perform further actions if needed after clicking

  // Close the browser
  await browser.close();
})();






const { test, expect } = require('@playwright/test');

test('click SVG and verify class change', async ({ page }) => {
  // Open the URL
  await page.goto('your-url-here');

  // Locate the parent div containing both the text "AAPL" and the SVG
  const parentDiv = await page.locator('div.flex.items-start');

  // Locate the specific SVG within the parent div
  const svg = await parentDiv.locator('svg.abcd');

  // Click the SVG element
  await svg.click();

  // Verify that the class of the div has changed to "bg-yellow-600"
  await expect(parentDiv).toHaveClass(/bg-yellow-600/);
});






const { test, expect } = require('@playwright/test');

test.describe('SVG Click Test', () => {
  test('should click SVG and verify class change on div', async ({ page }) => {
    // Navigate to the page
    await page.goto('http://localhost:3000'); // Adjust the URL as needed

    // Wait for the SVG element to appear in the DOM
    const svgSelector = 'svg.abcd';
    const svgElement = page.locator(svgSelector);
    await svgElement.waitFor({ state: 'attached' });

    // Log page content to verify the presence of the SVG element
    console.log(await page.content());

    // Ensure the SVG element is visible
    await expect(svgElement).toBeVisible();

    // Click the SVG element
    await svgElement.click();

    // Locate the div element and verify its class changes to 'bg-yellow-600'
    const divSelector = 'div.bg-yellow-600';
    const divElement = page.locator(divSelector);

    // Wait for the class change to occur
    await divElement.waitFor({ state: 'attached' });

    // Assert that the div has the expected class
    await expect(divElement).toHaveClass(/bg-yellow-600/);
  });
});








import { test, expect } from '@playwright/test';

test.describe('Search and Watchlist Components', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the search page
    await page.goto('http://localhost:3000/search');
  });

  test('should show loading indicator and display search results progressively, then add to watchlist', async ({ page }) => {
    // Define the progressive inputs
    const progressiveInputs = ['A', 'Ap', 'App', 'Appl', 'Apple'];

    for (const input of progressiveInputs) {
      // Type into the search input
      await page.fill('#searchInput', input);

      // Check if the loading indicator is visible
      const loadingIndicator = page.locator('[role="progressbar"]'); // Adjust the selector to match the actual loading indicator
      await expect(loadingIndicator).toBeVisible();

      // Wait for the loading indicator to disappear
      await expect(loadingIndicator).not.toBeVisible({ timeout: 10000 });

      // Wait for search results to appear
      const resultsLocator = page.locator('[role="option"]'); // Use the correct role or selector for search results
      await expect(resultsLocator.first()).toBeVisible({ timeout: 10000 });

      // Verify that at least one search result contains the expected company name and ticker
      const resultsCount = await resultsLocator.count();
      let found = false;
      for (let i = 0; i < resultsCount; i++) {
        const resultText = await resultsLocator.nth(i).innerText();
        if (resultText.includes('AAPL | Apple Inc')) {
          found = true;
          break;
        }
      }
      expect(found).toBe(true);
    }

    // Select the first search result
    const resultsLocator = page.locator('[role="option"]');
    await resultsLocator.first().click();

    // Check if the Details component appears with the selected stock's ticker
    const detailsComponent = page.locator('text=AAPL');
    await expect(detailsComponent).toBeVisible();

    // Add the stock to the watchlist
    const addToWatchlistButton = page.locator('button:has-text("Add to Watchlist")'); // Adjust the selector as necessary
    await addToWatchlistButton.click();

    // Navigate to the watchlist page
    await page.goto('http://localhost:3000/watchlist');

    // Verify that the watchlist now contains the added item
    const watchlistItem = page.locator('text=AAPL');
    await expect(watchlistItem).toBeVisible();

    // Remove the item from the watchlist
    const removeButton = page.locator('button:has-text("Remove from watchlist")');
    await removeButton.click();

    // Verify that the watchlist is empty again
    const emptyWatchlistMessage = page.locator('text=Your Watchlist is empty!');
    await expect(emptyWatchlistMessage).toBeVisible();
  });
});





import { test, expect } from '@playwright/test';

test.describe('StockTabs Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the stock page with a specific ticker symbol
    await page.goto('http://localhost:3000/stock/AAPL'); // Adjust URL as necessary
  });

  test('should switch between tabs and load content', async ({ page }) => {
    // Wait for the Summary tab content to load
    await expect(page.locator('text=Loading summary...')).toBeVisible();
    await expect(page.locator('text=Loading summary...')).not.toBeVisible({ timeout: 10000 });

    // Verify that summary data is displayed
    const summaryComponent = page.locator('text=Stock Summary Data'); // Adjust text to match actual summary data
    await expect(summaryComponent).toBeVisible();

    // Switch to the Top News tab
    const newsTab = page.locator('text=Top News');
    await newsTab.click();

    // Wait for the news data to load
    await expect(page.locator('text=Loading news...')).toBeVisible();
    await expect(page.locator('text=Loading news...')).not.toBeVisible({ timeout: 10000 });

    // Verify that news data is displayed
    const newsComponent = page.locator('text=News Component'); // Adjust text to match actual news component
    await expect(newsComponent).toBeVisible();

    // Switch to the Charts tab
    const chartsTab = page.locator('text=Charts');
    await chartsTab.click();

    // Verify that the chart is displayed
    const chartComponent = page.locator('text=Historical Chart'); // Adjust text to match actual chart component
    await expect(chartComponent).toBeVisible();
  });
});







import { test, expect } from '@playwright/test';

// Define the test
test('Stock Tabs Test', async ({ page }) => {
  // Navigate to the search page
  await page.goto('http://localhost:3000/search'); // Replace with your actual URL

  // Wait for the page to load
  await page.waitForLoadState('networkidle');

  // Type a company name into the search input
  await page.fill('#searchInput', 'Apple'); // Replace with any valid company name or keyword

  // Wait for search suggestions to appear
  await page.waitForSelector('[role="option"]');

  // Click on the first search suggestion
  const firstSuggestion = page.locator('[role="option"]').first();
  await firstSuggestion.click();

  // Wait for the summary content to load
  await page.waitForSelector('.summary-content');

  // Check if the summary content is visible
  const summaryVisible = await page.isVisible('.summary-content');
  expect(summaryVisible).toBeTruthy();

  // Find and click on the Top News tab
  await page.click('text=Top News');

  // Wait for the news content to load
  await page.waitForSelector('.news-container');

  // Check if the news content is visible
  const newsVisible = await page.isVisible('.news-container');
  expect(newsVisible).toBeTruthy();

  // Find and click on the Charts tab
  await page.click('text=Charts');

  // Wait for the charts to load
  await page.waitForSelector('.highcharts-container');

  // Check if the charts are visible
  const chartsVisible = await page.isVisible('.highcharts-container');
  expect(chartsVisible).toBeTruthy();
});







import { test, expect } from '@playwright/test';

test.describe('Theme Switching', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the home page before each test
    await page.goto('http://localhost:3000');
  });

  test('should toggle between light and dark modes globally', async ({ page }) => {
    // Check initial theme on the home page
    const appBar = page.locator('header');
    await expect(appBar).toHaveClass(/bg-green-800/); // Assuming green-800 is the initial light mode class

    // Toggle the theme switch
    await page.click('input[type="checkbox"]');

    // Verify the dark mode theme is applied globally
    await expect(appBar).toHaveClass(/bg-gray-900/); // Assuming gray-900 is the dark mode class

    // Navigate to another page (Search)
    await page.click('button[aria-label="menu"]');
    await page.click('text=Search');
    const searchAppBar = page.locator('header');
    await expect(searchAppBar).toHaveClass(/bg-gray-900/); // Confirm dark mode on the Search page

    // Toggle back to light mode
    await page.click('input[type="checkbox"]');

    // Verify light mode is applied globally
    await expect(appBar).toHaveClass(/bg-green-800/); // Back to initial light mode on the home page

    // Navigate back to home page to ensure consistency
    await page.goto('http://localhost:3000');
    await expect(appBar).toHaveClass(/bg-green-800/); // Ensure light mode on home page after navigation
  });
});









// tests/searchComponent.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Search Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the search page
    await page.goto('http://localhost:3000/search');
  });

  test('should show loading indicator and display search results progressively', async ({ page }) => {
    // Define the progressive inputs
    const progressiveInputs = ['A', 'Ap', 'App', 'Appl', 'Apple'];

    for (const input of progressiveInputs) {
      // Type into the search input
      await page.fill('#searchInput', input);

      // Check if the loading indicator is visible
      const loadingIndicator = page.locator('[role="progressbar"]'); // Adjust the selector to match the actual loading indicator
      await expect(loadingIndicator).toBeVisible();

      // Wait for the loading indicator to disappear
      await expect(loadingIndicator).not.toBeVisible({ timeout: 10000 });

      // Wait for search results to appear
      const resultsLocator = page.locator('[role="option"]'); // Use the correct role or selector for search results
      await expect(resultsLocator.first()).toBeVisible({ timeout: 10000 });

      // Verify that at least one search result contains the expected company name and ticker
      const resultsCount = await resultsLocator.count();
      let found = false;
      for (let i = 0; i < resultsCount; i++) {
        const resultText = await resultsLocator.nth(i).innerText();
        if (resultText.includes('AAPL | Apple Inc')) {
          found = true;
          break;
        }
      }
      expect(found).toBe(true);
    }

    // Select the first search result
    const resultsLocator = page.locator('[role="option"]');
    await resultsLocator.first().click();

    // Check if the Details component appears with the selected stock's ticker
    const detailsComponent = page.locator('text=AAPL');
    await expect(detailsComponent).toBeVisible();
  });
});







  test('should show no results toast message', async ({ page }) => {
    // Type into the search input
    await page.fill('#searchInput', 'UNKNOWN_COMPANY');

    // Wait for the no results toast message
    const toastMessage = page.locator('.Toastify__toast--error');
    await expect(toastMessage).toContainText('No results found!');
  });

  test('should handle search input debouncing', async ({ page }) => {
    // Type quickly into the search input
    await page.fill('#searchInput', 'Ap');
    await page.fill('#searchInput', 'Apple');

    // Wait for search results to appear
    const resultsLocator = page.locator('[role="option"]'); // Use the correct role or selector for search results
    await expect(resultsLocator).toBeVisible();

    // Verify that the search results contain the expected company name and ticker
    await expect(resultsLocator).toContainText('AAPL | Apple Inc');
  });
});









// tests/searchComponent.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Search Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the search page
    await page.goto('http://localhost:3000/search');
  });

  test('should show loading indicator and display search results', async ({ page }) => {
    // Type into the search input
    await page.fill('#searchInput', 'AAPL');

    // Check if the loading indicator is visible
    await expect(page.locator('role=circularprogress')).toBeVisible();

    // Wait for search results to appear
    const resultsLocator = page.locator('role=option');
    await expect(resultsLocator).toBeVisible();

    // Verify that the search results contain the expected stock
    await expect(resultsLocator).toContainText('AAPL');

    // Select a search result
    await resultsLocator.first().click();

    // Check if the Details component appears with the selected stock's ticker
    const detailsComponent = page.locator('text=AAPL');
    await expect(detailsComponent).toBeVisible();
  });

  test('should show no results toast message', async ({ page }) => {
    // Type into the search input
    await page.fill('#searchInput', 'UNKNOWN_STOCK');

    // Wait for the no results toast message
    const toastMessage = page.locator('.Toastify__toast--error');
    await expect(toastMessage).toContainText('No results found!');
  });

  test('should handle search input debouncing', async ({ page }) => {
    // Type quickly into the search input
    await page.fill('#searchInput', 'AP');
    await page.fill('#searchInput', 'AAPL');

    // Wait for search results to appear
    const resultsLocator = page.locator('role=option');
    await expect(resultsLocator).toBeVisible();

    // Verify that the search results contain the expected stock
    await expect(resultsLocator).toContainText('AAPL');
  });
});






import { test, expect } from '@playwright/test';

test.describe('Watchlist Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the watchlist page
    await page.goto('http://localhost:3000/watchlist');
  });

  test('should add stock to watchlist and display it, then remove it and check if watchlist is empty', async ({ page }) => {
    // Step 1: Add stock to watchlist
    await page.evaluate(() => {
      localStorage.setItem('watchlist', JSON.stringify(['AAPL']));
    });
    await page.reload();

    // Step 2: Verify the stock is displayed in the watchlist
    await page.route('**/api/stock-summary/AAPL', (route) => {
      route.fulfill({
        status: 200,
        body: JSON.stringify({
          ticker: 'AAPL',
          companyName: 'Apple Inc.',
          lastPrice: '145.09',
          prevClose: '143.00',
        }),
      });
    });

    // Wait for the watchlist to be populated
    const watchlistCard = page.locator('.shadow-md');
    await expect(watchlistCard).toHaveCount(1);

    // Verify the stock details are displayed correctly
    await expect(watchlistCard).toContainText('AAPL');
    await expect(watchlistCard).toContainText('Apple Inc.');
    await expect(watchlistCard).toContainText('145.09');
    await expect(watchlistCard).toContainText('(2.09%)');

    // Step 3: Remove the stock from the watchlist
    await page.locator('button[title="Remove from watchlist"]').click();

    // Wait for the watchlist to be empty
    await expect(page.locator('.shadow-md')).toHaveCount(0);

    // Step 4: Verify the "Your Watchlist is empty!" message is displayed
    await expect(page.locator('text=Your Watchlist is empty!')).toBeVisible();
  });
});












import { test, expect } from '@playwright/test';

test.describe('Navbar Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the home page before each test
    await page.goto('http://localhost:3000');
  });

  test('should render the Navbar with all components', async ({ page }) => {
    // Check if the Navbar is rendered
    const navbar = page.locator('header');
    await expect(navbar).toBeVisible();

    // Check if the title is displayed
    const title = navbar.locator('text=Stock Market');
    await expect(title).toBeVisible();

    // Check if the menu icon is displayed
    const menuIcon = navbar.locator('button[aria-label="menu"]');
    await expect(menuIcon).toBeVisible();

    // Check if the theme switch is displayed
    const themeSwitch = navbar.locator('input[type="checkbox"]');
    await expect(themeSwitch).toBeVisible();
  });

  test('should navigate to the correct paths when menu items are clicked', async ({ page }) => {
    // Click the menu icon to open the menu
    await page.click('button[aria-label="menu"]');

    // Click the Search menu item and verify navigation
    await page.click('text=Search');
    await expect(page).toHaveURL('http://localhost:3000/search');

    // Navigate back to home
    await page.goto('http://localhost:3000');

    // Click the menu icon to open the menu
    await page.click('button[aria-label="menu"]');

    // Click the Watchlist menu item and verify navigation
    await page.click('text=Watchlist');
    await expect(page).toHaveURL('http://localhost:3000/watchlist');
  });

  test('should toggle between light and dark modes', async ({ page }) => {
    // Check initial theme
    const appBar = page.locator('header');
    await expect(appBar).toHaveClass(/bg-green-800/);

    // Toggle the theme switch
    await page.click('input[type="checkbox"]');

    // Verify the dark mode theme is applied
    await expect(appBar).toHaveClass(/bg-gray-900/);

    // Toggle the theme switch back
    await page.click('input[type="checkbox"]');

    // Verify the light mode theme is applied
    await expect(appBar).toHaveClass(/bg-green-800/);
  });
});







import { test, expect } from '@playwright/test';

// Define the test
test('Stock Tabs Test', async ({ page }) => {
  // Navigate to your application
  await page.goto('http://localhost:3000'); // Replace with your actual URL

  // Wait for the page to load
  await page.waitForLoadState('networkidle');

  // Find and click on the Summary tab
  await page.click('text=Summary');

  // Wait for the summary content to load
  await page.waitForSelector('.summary-content');

  // Check if the summary content is visible
  const summaryVisible = await page.isVisible('.summary-content');
  expect(summaryVisible).toBeTruthy();

  // Find and click on the Top News tab
  await page.click('text=Top News');

  // Wait for the news content to load
  await page.waitForSelector('.news-container');

  // Check if the news content is visible
  const newsVisible = await page.isVisible('.news-container');
  expect(newsVisible).toBeTruthy();

  // Find and click on the Charts tab
  await page.click('text=Charts');

  // Wait for the charts to load
  await page.waitForSelector('.highcharts-container');

  // Check if the charts are visible
  const chartsVisible = await page.isVisible('.highcharts-container');
  expect(chartsVisible).toBeTruthy();
});
