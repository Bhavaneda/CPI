const { test, expect } = require('@playwright/test');

test('click SVG and verify class change', async ({ page }) => {
  // Open the URL
  await page.goto('your-url-here');

  // Locate the parent div containing both the text "AAPL" and the SVG
  const parentDiv = await page.locator('div.flex.items-start');

  // Locate the specific SVG within the parent div
  const svg = await parentDiv.locator('svg.abcd');

  // Click the SVG element
  await svg.click();

  // Verify that the class of the div has changed to "bg-yellow-600"
  await expect(parentDiv).toHaveClass(/bg-yellow-600/);
});






const { test, expect } = require('@playwright/test');

test.describe('SVG Click Test', () => {
  test('should click SVG and verify class change on div', async ({ page }) => {
    // Navigate to the page
    await page.goto('http://localhost:3000'); // Adjust the URL as needed

    // Wait for the SVG element to appear in the DOM
    const svgSelector = 'svg.abcd';
    const svgElement = page.locator(svgSelector);
    await svgElement.waitFor({ state: 'attached' });

    // Log page content to verify the presence of the SVG element
    console.log(await page.content());

    // Ensure the SVG element is visible
    await expect(svgElement).toBeVisible();

    // Click the SVG element
    await svgElement.click();

    // Locate the div element and verify its class changes to 'bg-yellow-600'
    const divSelector = 'div.bg-yellow-600';
    const divElement = page.locator(divSelector);

    // Wait for the class change to occur
    await divElement.waitFor({ state: 'attached' });

    // Assert that the div has the expected class
    await expect(divElement).toHaveClass(/bg-yellow-600/);
  });
});








import { test, expect } from '@playwright/test';

test.describe('Search and Watchlist Components', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the search page
    await page.goto('http://localhost:3000/search');
  });

  test('should show loading indicator and display search results progressively, then add to watchlist', async ({ page }) => {
    // Define the progressive inputs
    const progressiveInputs = ['A', 'Ap', 'App', 'Appl', 'Apple'];

    for (const input of progressiveInputs) {
      // Type into the search input
      await page.fill('#searchInput', input);

      // Check if the loading indicator is visible
      const loadingIndicator = page.locator('[role="progressbar"]'); // Adjust the selector to match the actual loading indicator
      await expect(loadingIndicator).toBeVisible();

      // Wait for the loading indicator to disappear
      await expect(loadingIndicator).not.toBeVisible({ timeout: 10000 });

      // Wait for search results to appear
      const resultsLocator = page.locator('[role="option"]'); // Use the correct role or selector for search results
      await expect(resultsLocator.first()).toBeVisible({ timeout: 10000 });

      // Verify that at least one search result contains the expected company name and ticker
      const resultsCount = await resultsLocator.count();
      let found = false;
      for (let i = 0; i < resultsCount; i++) {
        const resultText = await resultsLocator.nth(i).innerText();
        if (resultText.includes('AAPL | Apple Inc')) {
          found = true;
          break;
        }
      }
      expect(found).toBe(true);
    }

    // Select the first search result
    const resultsLocator = page.locator('[role="option"]');
    await resultsLocator.first().click();

    // Check if the Details component appears with the selected stock's ticker
    const detailsComponent = page.locator('text=AAPL');
    await expect(detailsComponent).toBeVisible();

    // Add the stock to the watchlist
    const addToWatchlistButton = page.locator('button:has-text("Add to Watchlist")'); // Adjust the selector as necessary
    await addToWatchlistButton.click();

    // Navigate to the watchlist page
    await page.goto('http://localhost:3000/watchlist');

    // Verify that the watchlist now contains the added item
    const watchlistItem = page.locator('text=AAPL');
    await expect(watchlistItem).toBeVisible();

    // Remove the item from the watchlist
    const removeButton = page.locator('button:has-text("Remove from watchlist")');
    await removeButton.click();

    // Verify that the watchlist is empty again
    const emptyWatchlistMessage = page.locator('text=Your Watchlist is empty!');
    await expect(emptyWatchlistMessage).toBeVisible();
  });
});





import { test, expect } from '@playwright/test';

test.describe('StockTabs Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the stock page with a specific ticker symbol
    await page.goto('http://localhost:3000/stock/AAPL'); // Adjust URL as necessary
  });

  test('should switch between tabs and load content', async ({ page }) => {
    // Wait for the Summary tab content to load
    await expect(page.locator('text=Loading summary...')).toBeVisible();
    await expect(page.locator('text=Loading summary...')).not.toBeVisible({ timeout: 10000 });

    // Verify that summary data is displayed
    const summaryComponent = page.locator('text=Stock Summary Data'); // Adjust text to match actual summary data
    await expect(summaryComponent).toBeVisible();

    // Switch to the Top News tab
    const newsTab = page.locator('text=Top News');
    await newsTab.click();

    // Wait for the news data to load
    await expect(page.locator('text=Loading news...')).toBeVisible();
    await expect(page.locator('text=Loading news...')).not.toBeVisible({ timeout: 10000 });

    // Verify that news data is displayed
    const newsComponent = page.locator('text=News Component'); // Adjust text to match actual news component
    await expect(newsComponent).toBeVisible();

    // Switch to the Charts tab
    const chartsTab = page.locator('text=Charts');
    await chartsTab.click();

    // Verify that the chart is displayed
    const chartComponent = page.locator('text=Historical Chart'); // Adjust text to match actual chart component
    await expect(chartComponent).toBeVisible();
  });
});







import { test, expect } from '@playwright/test';

// Define the test
test('Stock Tabs Test', async ({ page }) => {
  // Navigate to the search page
  await page.goto('http://localhost:3000/search'); // Replace with your actual URL

  // Wait for the page to load
  await page.waitForLoadState('networkidle');

  // Type a company name into the search input
  await page.fill('#searchInput', 'Apple'); // Replace with any valid company name or keyword

  // Wait for search suggestions to appear
  await page.waitForSelector('[role="option"]');

  // Click on the first search suggestion
  const firstSuggestion = page.locator('[role="option"]').first();
  await firstSuggestion.click();

  // Wait for the summary content to load
  await page.waitForSelector('.summary-content');

  // Check if the summary content is visible
  const summaryVisible = await page.isVisible('.summary-content');
  expect(summaryVisible).toBeTruthy();

  // Find and click on the Top News tab
  await page.click('text=Top News');

  // Wait for the news content to load
  await page.waitForSelector('.news-container');

  // Check if the news content is visible
  const newsVisible = await page.isVisible('.news-container');
  expect(newsVisible).toBeTruthy();

  // Find and click on the Charts tab
  await page.click('text=Charts');

  // Wait for the charts to load
  await page.waitForSelector('.highcharts-container');

  // Check if the charts are visible
  const chartsVisible = await page.isVisible('.highcharts-container');
  expect(chartsVisible).toBeTruthy();
});







import { test, expect } from '@playwright/test';

test.describe('Theme Switching', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the home page before each test
    await page.goto('http://localhost:3000');
  });

  test('should toggle between light and dark modes globally', async ({ page }) => {
    // Check initial theme on the home page
    const appBar = page.locator('header');
    await expect(appBar).toHaveClass(/bg-green-800/); // Assuming green-800 is the initial light mode class

    // Toggle the theme switch
    await page.click('input[type="checkbox"]');

    // Verify the dark mode theme is applied globally
    await expect(appBar).toHaveClass(/bg-gray-900/); // Assuming gray-900 is the dark mode class

    // Navigate to another page (Search)
    await page.click('button[aria-label="menu"]');
    await page.click('text=Search');
    const searchAppBar = page.locator('header');
    await expect(searchAppBar).toHaveClass(/bg-gray-900/); // Confirm dark mode on the Search page

    // Toggle back to light mode
    await page.click('input[type="checkbox"]');

    // Verify light mode is applied globally
    await expect(appBar).toHaveClass(/bg-green-800/); // Back to initial light mode on the home page

    // Navigate back to home page to ensure consistency
    await page.goto('http://localhost:3000');
    await expect(appBar).toHaveClass(/bg-green-800/); // Ensure light mode on home page after navigation
  });
});









// tests/searchComponent.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Search Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the search page
    await page.goto('http://localhost:3000/search');
  });

  test('should show loading indicator and display search results progressively', async ({ page }) => {
    // Define the progressive inputs
    const progressiveInputs = ['A', 'Ap', 'App', 'Appl', 'Apple'];

    for (const input of progressiveInputs) {
      // Type into the search input
      await page.fill('#searchInput', input);

      // Check if the loading indicator is visible
      const loadingIndicator = page.locator('[role="progressbar"]'); // Adjust the selector to match the actual loading indicator
      await expect(loadingIndicator).toBeVisible();

      // Wait for the loading indicator to disappear
      await expect(loadingIndicator).not.toBeVisible({ timeout: 10000 });

      // Wait for search results to appear
      const resultsLocator = page.locator('[role="option"]'); // Use the correct role or selector for search results
      await expect(resultsLocator.first()).toBeVisible({ timeout: 10000 });

      // Verify that at least one search result contains the expected company name and ticker
      const resultsCount = await resultsLocator.count();
      let found = false;
      for (let i = 0; i < resultsCount; i++) {
        const resultText = await resultsLocator.nth(i).innerText();
        if (resultText.includes('AAPL | Apple Inc')) {
          found = true;
          break;
        }
      }
      expect(found).toBe(true);
    }

    // Select the first search result
    const resultsLocator = page.locator('[role="option"]');
    await resultsLocator.first().click();

    // Check if the Details component appears with the selected stock's ticker
    const detailsComponent = page.locator('text=AAPL');
    await expect(detailsComponent).toBeVisible();
  });
});







  test('should show no results toast message', async ({ page }) => {
    // Type into the search input
    await page.fill('#searchInput', 'UNKNOWN_COMPANY');

    // Wait for the no results toast message
    const toastMessage = page.locator('.Toastify__toast--error');
    await expect(toastMessage).toContainText('No results found!');
  });

  test('should handle search input debouncing', async ({ page }) => {
    // Type quickly into the search input
    await page.fill('#searchInput', 'Ap');
    await page.fill('#searchInput', 'Apple');

    // Wait for search results to appear
    const resultsLocator = page.locator('[role="option"]'); // Use the correct role or selector for search results
    await expect(resultsLocator).toBeVisible();

    // Verify that the search results contain the expected company name and ticker
    await expect(resultsLocator).toContainText('AAPL | Apple Inc');
  });
});









// tests/searchComponent.spec.ts
import { test, expect } from '@playwright/test';

test.describe('Search Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the search page
    await page.goto('http://localhost:3000/search');
  });

  test('should show loading indicator and display search results', async ({ page }) => {
    // Type into the search input
    await page.fill('#searchInput', 'AAPL');

    // Check if the loading indicator is visible
    await expect(page.locator('role=circularprogress')).toBeVisible();

    // Wait for search results to appear
    const resultsLocator = page.locator('role=option');
    await expect(resultsLocator).toBeVisible();

    // Verify that the search results contain the expected stock
    await expect(resultsLocator).toContainText('AAPL');

    // Select a search result
    await resultsLocator.first().click();

    // Check if the Details component appears with the selected stock's ticker
    const detailsComponent = page.locator('text=AAPL');
    await expect(detailsComponent).toBeVisible();
  });

  test('should show no results toast message', async ({ page }) => {
    // Type into the search input
    await page.fill('#searchInput', 'UNKNOWN_STOCK');

    // Wait for the no results toast message
    const toastMessage = page.locator('.Toastify__toast--error');
    await expect(toastMessage).toContainText('No results found!');
  });

  test('should handle search input debouncing', async ({ page }) => {
    // Type quickly into the search input
    await page.fill('#searchInput', 'AP');
    await page.fill('#searchInput', 'AAPL');

    // Wait for search results to appear
    const resultsLocator = page.locator('role=option');
    await expect(resultsLocator).toBeVisible();

    // Verify that the search results contain the expected stock
    await expect(resultsLocator).toContainText('AAPL');
  });
});






import { test, expect } from '@playwright/test';

test.describe('Watchlist Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the watchlist page
    await page.goto('http://localhost:3000/watchlist');
  });

  test('should add stock to watchlist and display it, then remove it and check if watchlist is empty', async ({ page }) => {
    // Step 1: Add stock to watchlist
    await page.evaluate(() => {
      localStorage.setItem('watchlist', JSON.stringify(['AAPL']));
    });
    await page.reload();

    // Step 2: Verify the stock is displayed in the watchlist
    await page.route('**/api/stock-summary/AAPL', (route) => {
      route.fulfill({
        status: 200,
        body: JSON.stringify({
          ticker: 'AAPL',
          companyName: 'Apple Inc.',
          lastPrice: '145.09',
          prevClose: '143.00',
        }),
      });
    });

    // Wait for the watchlist to be populated
    const watchlistCard = page.locator('.shadow-md');
    await expect(watchlistCard).toHaveCount(1);

    // Verify the stock details are displayed correctly
    await expect(watchlistCard).toContainText('AAPL');
    await expect(watchlistCard).toContainText('Apple Inc.');
    await expect(watchlistCard).toContainText('145.09');
    await expect(watchlistCard).toContainText('(2.09%)');

    // Step 3: Remove the stock from the watchlist
    await page.locator('button[title="Remove from watchlist"]').click();

    // Wait for the watchlist to be empty
    await expect(page.locator('.shadow-md')).toHaveCount(0);

    // Step 4: Verify the "Your Watchlist is empty!" message is displayed
    await expect(page.locator('text=Your Watchlist is empty!')).toBeVisible();
  });
});












import { test, expect } from '@playwright/test';

test.describe('Navbar Component', () => {
  test.beforeEach(async ({ page }) => {
    // Navigate to the home page before each test
    await page.goto('http://localhost:3000');
  });

  test('should render the Navbar with all components', async ({ page }) => {
    // Check if the Navbar is rendered
    const navbar = page.locator('header');
    await expect(navbar).toBeVisible();

    // Check if the title is displayed
    const title = navbar.locator('text=Stock Market');
    await expect(title).toBeVisible();

    // Check if the menu icon is displayed
    const menuIcon = navbar.locator('button[aria-label="menu"]');
    await expect(menuIcon).toBeVisible();

    // Check if the theme switch is displayed
    const themeSwitch = navbar.locator('input[type="checkbox"]');
    await expect(themeSwitch).toBeVisible();
  });

  test('should navigate to the correct paths when menu items are clicked', async ({ page }) => {
    // Click the menu icon to open the menu
    await page.click('button[aria-label="menu"]');

    // Click the Search menu item and verify navigation
    await page.click('text=Search');
    await expect(page).toHaveURL('http://localhost:3000/search');

    // Navigate back to home
    await page.goto('http://localhost:3000');

    // Click the menu icon to open the menu
    await page.click('button[aria-label="menu"]');

    // Click the Watchlist menu item and verify navigation
    await page.click('text=Watchlist');
    await expect(page).toHaveURL('http://localhost:3000/watchlist');
  });

  test('should toggle between light and dark modes', async ({ page }) => {
    // Check initial theme
    const appBar = page.locator('header');
    await expect(appBar).toHaveClass(/bg-green-800/);

    // Toggle the theme switch
    await page.click('input[type="checkbox"]');

    // Verify the dark mode theme is applied
    await expect(appBar).toHaveClass(/bg-gray-900/);

    // Toggle the theme switch back
    await page.click('input[type="checkbox"]');

    // Verify the light mode theme is applied
    await expect(appBar).toHaveClass(/bg-green-800/);
  });
});







import { test, expect } from '@playwright/test';

// Define the test
test('Stock Tabs Test', async ({ page }) => {
  // Navigate to your application
  await page.goto('http://localhost:3000'); // Replace with your actual URL

  // Wait for the page to load
  await page.waitForLoadState('networkidle');

  // Find and click on the Summary tab
  await page.click('text=Summary');

  // Wait for the summary content to load
  await page.waitForSelector('.summary-content');

  // Check if the summary content is visible
  const summaryVisible = await page.isVisible('.summary-content');
  expect(summaryVisible).toBeTruthy();

  // Find and click on the Top News tab
  await page.click('text=Top News');

  // Wait for the news content to load
  await page.waitForSelector('.news-container');

  // Check if the news content is visible
  const newsVisible = await page.isVisible('.news-container');
  expect(newsVisible).toBeTruthy();

  // Find and click on the Charts tab
  await page.click('text=Charts');

  // Wait for the charts to load
  await page.waitForSelector('.highcharts-container');

  // Check if the charts are visible
  const chartsVisible = await page.isVisible('.highcharts-container');
  expect(chartsVisible).toBeTruthy();
});
